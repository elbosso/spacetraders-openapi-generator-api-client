/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.api;

import de.elbosso.spacetraders.client.invoker.ApiException;
import de.elbosso.spacetraders.client.model.GetJumpGate200Response;
import de.elbosso.spacetraders.client.model.GetMarket200Response;
import de.elbosso.spacetraders.client.model.GetShipyard200Response;
import de.elbosso.spacetraders.client.model.GetSystem200Response;
import de.elbosso.spacetraders.client.model.GetSystemWaypoints200Response;
import de.elbosso.spacetraders.client.model.GetSystems200Response;
import de.elbosso.spacetraders.client.model.GetWaypoint200Response;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemsApi
 */
@Ignore
public class SystemsApiTest {

    private final SystemsApi api = new SystemsApi();

    
    /**
     * Get Jump Gate
     *
     * Get jump gate details for a waypoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJumpGateTest() throws ApiException
    {
        String systemSymbol = null;
        String waypointSymbol = null;
        GetJumpGate200Response response = api.getJumpGate(systemSymbol, waypointSymbol);

        // TODO: test validations
    }
    
    /**
     * Get Market
     *
     * Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMarketTest() throws ApiException
    {
        String systemSymbol = null;
        String waypointSymbol = null;
        GetMarket200Response response = api.getMarket(systemSymbol, waypointSymbol);

        // TODO: test validations
    }
    
    /**
     * Get Shipyard
     *
     * Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipyardTest()  throws ApiException{
        String systemSymbol = null;
        String waypointSymbol = null;
        GetShipyard200Response response = api.getShipyard(systemSymbol, waypointSymbol);

        // TODO: test validations
    }
    
    /**
     * Get System
     *
     * Get the details of a system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemTest()  throws ApiException{
        String systemSymbol = null;
        GetSystem200Response response = api.getSystem(systemSymbol);

        // TODO: test validations
    }
    
    /**
     * List Waypoints
     *
     * Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemWaypointsTest()  throws ApiException{
        String systemSymbol = null;
        Integer page = null;
        Integer limit = null;
        GetSystemWaypoints200Response response = api.getSystemWaypoints(systemSymbol, page, limit);

        // TODO: test validations
    }
    
    /**
     * List Systems
     *
     * Return a list of all systems.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSystemsTest()  throws ApiException{
        Integer page = null;
        Integer limit = null;
        GetSystems200Response response = api.getSystems(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get Waypoint
     *
     * View the details of a waypoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWaypointTest()  throws ApiException{
        String systemSymbol = null;
        String waypointSymbol = null;
        GetWaypoint200Response response = api.getWaypoint(systemSymbol, waypointSymbol);

        // TODO: test validations
    }
    
}
