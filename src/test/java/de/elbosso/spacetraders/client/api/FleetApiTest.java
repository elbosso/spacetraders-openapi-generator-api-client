/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.api;

import de.elbosso.spacetraders.client.invoker.ApiException;
import de.elbosso.spacetraders.client.model.CreateChart201Response;
import de.elbosso.spacetraders.client.model.CreateShipShipScan201Response;
import de.elbosso.spacetraders.client.model.CreateShipSystemScan201Response;
import de.elbosso.spacetraders.client.model.CreateShipWaypointScan201Response;
import de.elbosso.spacetraders.client.model.CreateSurvey201Response;
import de.elbosso.spacetraders.client.model.DockShip200Response;
import de.elbosso.spacetraders.client.model.ExtractResources201Response;
import de.elbosso.spacetraders.client.model.ExtractResourcesRequest;
import de.elbosso.spacetraders.client.model.GetMounts200Response;
import de.elbosso.spacetraders.client.model.GetMyShip200Response;
import de.elbosso.spacetraders.client.model.GetMyShipCargo200Response;
import de.elbosso.spacetraders.client.model.GetMyShips200Response;
import de.elbosso.spacetraders.client.model.GetShipCooldown200Response;
import de.elbosso.spacetraders.client.model.GetShipNav200Response;
import de.elbosso.spacetraders.client.model.InstallMount201Response;
import de.elbosso.spacetraders.client.model.InstallMountRequest;
import de.elbosso.spacetraders.client.model.Jettison200Response;
import de.elbosso.spacetraders.client.model.JettisonRequest;
import de.elbosso.spacetraders.client.model.JumpShip200Response;
import de.elbosso.spacetraders.client.model.JumpShipRequest;
import de.elbosso.spacetraders.client.model.NavigateShip200Response;
import de.elbosso.spacetraders.client.model.NavigateShipRequest;
import de.elbosso.spacetraders.client.model.NegotiateContract200Response;
import de.elbosso.spacetraders.client.model.OrbitShip200Response;
import de.elbosso.spacetraders.client.model.PatchShipNavRequest;
import de.elbosso.spacetraders.client.model.PurchaseCargo201Response;
import de.elbosso.spacetraders.client.model.PurchaseCargoRequest;
import de.elbosso.spacetraders.client.model.PurchaseShip201Response;
import de.elbosso.spacetraders.client.model.PurchaseShipRequest;
import de.elbosso.spacetraders.client.model.RefuelShip200Response;
import de.elbosso.spacetraders.client.model.RemoveMount201Response;
import de.elbosso.spacetraders.client.model.RemoveMountRequest;
import de.elbosso.spacetraders.client.model.SellCargo201Response;
import de.elbosso.spacetraders.client.model.SellCargoRequest;
import de.elbosso.spacetraders.client.model.ShipRefine200Response;
import de.elbosso.spacetraders.client.model.ShipRefineRequest;
import de.elbosso.spacetraders.client.model.TransferCargo200Response;
import de.elbosso.spacetraders.client.model.TransferCargoRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FleetApi
 */
@Ignore
public class FleetApiTest {

    private final FleetApi api = new FleetApi();

    
    /**
     * Create Chart
     *
     * Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartTest() throws ApiException{
        String shipSymbol = null;
        CreateChart201Response response = api.createChart(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Scan Ships
     *
     * Activate your ship&#39;s sensor arrays to scan for ship information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShipShipScanTest() throws ApiException
    {
        String shipSymbol = null;
        CreateShipShipScan201Response response = api.createShipShipScan(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Scan Systems
     *
     * Activate your ship&#39;s sensor arrays to scan for system information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShipSystemScanTest() throws ApiException{
        String shipSymbol = null;
        CreateShipSystemScan201Response response = api.createShipSystemScan(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Scan Waypoints
     *
     * Activate your ship&#39;s sensor arrays to scan for waypoint information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShipWaypointScanTest() throws ApiException{
        String shipSymbol = null;
        CreateShipWaypointScan201Response response = api.createShipWaypointScan(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Create Survey
     *
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSurveyTest() throws ApiException{
        String shipSymbol = null;
        CreateSurvey201Response response = api.createSurvey(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Dock Ship
     *
     * Attempt to dock your ship at it&#39;s current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dockShipTest() throws ApiException{
        String shipSymbol = null;
        DockShip200Response response = api.dockShip(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Extract Resources
     *
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractResourcesTest() throws ApiException{
        String shipSymbol = null;
        ExtractResourcesRequest extractResourcesRequest = null;
        ExtractResources201Response response = api.extractResources(shipSymbol, extractResourcesRequest);

        // TODO: test validations
    }
    
    /**
     * Get Mounts
     *
     * Get the mounts on a ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMountsTest() throws ApiException{
        String shipSymbol = null;
        GetMounts200Response response = api.getMounts(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Get Ship
     *
     * Retrieve the details of your ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMyShipTest() throws ApiException{
        String shipSymbol = null;
        GetMyShip200Response response = api.getMyShip(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Get Ship Cargo
     *
     * Retrieve the cargo of your ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMyShipCargoTest() throws ApiException{
        String shipSymbol = null;
        GetMyShipCargo200Response response = api.getMyShipCargo(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * List Ships
     *
     * Retrieve all of your ships.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMyShipsTest() throws ApiException{
        Integer page = null;
        Integer limit = null;
        GetMyShips200Response response = api.getMyShips(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get Ship Cooldown
     *
     * Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipCooldownTest() throws ApiException{
        String shipSymbol = null;
        GetShipCooldown200Response response = api.getShipCooldown(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Get Ship Nav
     *
     * Get the current nav status of a ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipNavTest() throws ApiException{
        String shipSymbol = null;
        GetShipNav200Response response = api.getShipNav(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Install Mount
     *
     * Install a mount on a ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void installMountTest() throws ApiException{
        String shipSymbol = null;
        InstallMountRequest installMountRequest = null;
        InstallMount201Response response = api.installMount(shipSymbol, installMountRequest);

        // TODO: test validations
    }
    
    /**
     * Jettison Cargo
     *
     * Jettison cargo from your ship&#39;s cargo hold.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jettisonTest() throws ApiException{
        String shipSymbol = null;
        JettisonRequest jettisonRequest = null;
        Jettison200Response response = api.jettison(shipSymbol, jettisonRequest);

        // TODO: test validations
    }
    
    /**
     * Jump Ship
     *
     * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jumpShipTest() throws ApiException{
        String shipSymbol = null;
        JumpShipRequest jumpShipRequest = null;
        JumpShip200Response response = api.jumpShip(shipSymbol, jumpShipRequest);

        // TODO: test validations
    }
    
    /**
     * Navigate Ship
     *
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s warp or jump actions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void navigateShipTest() throws ApiException{
        String shipSymbol = null;
        NavigateShipRequest navigateShipRequest = null;
        NavigateShip200Response response = api.navigateShip(shipSymbol, navigateShipRequest);

        // TODO: test validations
    }
    
    /**
     * Negotiate Contract
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void negotiateContractTest() throws ApiException{
        String shipSymbol = null;
        Object body = null;
        NegotiateContract200Response response = api.negotiateContract(shipSymbol, body);

        // TODO: test validations
    }
    
    /**
     * Orbit Ship
     *
     * Attempt to move your ship into orbit at it&#39;s current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orbitShipTest() throws ApiException{
        String shipSymbol = null;
        OrbitShip200Response response = api.orbitShip(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Patch Ship Nav
     *
     * Update the nav data of a ship, such as the flight mode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchShipNavTest() throws ApiException{
        String shipSymbol = null;
        PatchShipNavRequest patchShipNavRequest = null;
        GetShipNav200Response response = api.patchShipNav(shipSymbol, patchShipNavRequest);

        // TODO: test validations
    }
    
    /**
     * Purchase Cargo
     *
     * Purchase cargo.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseCargoTest() throws ApiException{
        String shipSymbol = null;
        PurchaseCargoRequest purchaseCargoRequest = null;
        PurchaseCargo201Response response = api.purchaseCargo(shipSymbol, purchaseCargoRequest);

        // TODO: test validations
    }
    
    /**
     * Purchase Ship
     *
     * Purchase a ship
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseShipTest() throws ApiException{
        PurchaseShipRequest purchaseShipRequest = null;
        PurchaseShip201Response response = api.purchaseShip(purchaseShipRequest);

        // TODO: test validations
    }
    
    /**
     * Refuel Ship
     *
     * Refuel your ship from the local market.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refuelShipTest() throws ApiException{
        String shipSymbol = null;
        RefuelShip200Response response = api.refuelShip(shipSymbol);

        // TODO: test validations
    }
    
    /**
     * Remove Mount
     *
     * Remove a mount from a ship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeMountTest() throws ApiException{
        String shipSymbol = null;
        RemoveMountRequest removeMountRequest = null;
        RemoveMount201Response response = api.removeMount(shipSymbol, removeMountRequest);

        // TODO: test validations
    }
    
    /**
     * Sell Cargo
     *
     * Sell cargo.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sellCargoTest() throws ApiException{
        String shipSymbol = null;
        SellCargoRequest sellCargoRequest = null;
        SellCargo201Response response = api.sellCargo(shipSymbol, sellCargoRequest);

        // TODO: test validations
    }
    
    /**
     * Ship Refine
     *
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shipRefineTest() throws ApiException{
        String shipSymbol = null;
        ShipRefineRequest shipRefineRequest = null;
        ShipRefine200Response response = api.shipRefine(shipSymbol, shipRefineRequest);

        // TODO: test validations
    }
    
    /**
     * Transfer Cargo
     *
     * Transfer cargo between ships.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferCargoTest() throws ApiException{
        String shipSymbol = null;
        TransferCargoRequest transferCargoRequest = null;
        TransferCargo200Response response = api.transferCargo(shipSymbol, transferCargoRequest);

        // TODO: test validations
    }
    
    /**
     * Warp Ship
     *
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship&#39;s manifest, and will pay out crew wages from the agent&#39;s account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void warpShipTest() throws ApiException{
        String shipSymbol = null;
        NavigateShipRequest navigateShipRequest = null;
        NavigateShip200Response response = api.warpShip(shipSymbol, navigateShipRequest);

        // TODO: test validations
    }
    
}
