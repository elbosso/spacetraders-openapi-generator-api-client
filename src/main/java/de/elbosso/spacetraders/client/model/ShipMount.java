/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.ShipRequirements;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A mount is installed on the exterier of a ship.
 */
@JsonPropertyOrder({
  ShipMount.JSON_PROPERTY_SYMBOL,
  ShipMount.JSON_PROPERTY_NAME,
  ShipMount.JSON_PROPERTY_DESCRIPTION,
  ShipMount.JSON_PROPERTY_STRENGTH,
  ShipMount.JSON_PROPERTY_DEPOSITS,
  ShipMount.JSON_PROPERTY_REQUIREMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class ShipMount {
  /**
   * Gets or Sets symbol
   */
  public enum SymbolEnum {
    GAS_SIPHON_I("MOUNT_GAS_SIPHON_I"),
    
    GAS_SIPHON_II("MOUNT_GAS_SIPHON_II"),
    
    GAS_SIPHON_III("MOUNT_GAS_SIPHON_III"),
    
    SURVEYOR_I("MOUNT_SURVEYOR_I"),
    
    SURVEYOR_II("MOUNT_SURVEYOR_II"),
    
    SURVEYOR_III("MOUNT_SURVEYOR_III"),
    
    SENSOR_ARRAY_I("MOUNT_SENSOR_ARRAY_I"),
    
    SENSOR_ARRAY_II("MOUNT_SENSOR_ARRAY_II"),
    
    SENSOR_ARRAY_III("MOUNT_SENSOR_ARRAY_III"),
    
    MINING_LASER_I("MOUNT_MINING_LASER_I"),
    
    MINING_LASER_II("MOUNT_MINING_LASER_II"),
    
    MINING_LASER_III("MOUNT_MINING_LASER_III"),
    
    LASER_CANNON_I("MOUNT_LASER_CANNON_I"),
    
    MISSILE_LAUNCHER_I("MOUNT_MISSILE_LAUNCHER_I"),
    
    TURRET_I("MOUNT_TURRET_I");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private SymbolEnum symbol;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_STRENGTH = "strength";
  private Integer strength;

  /**
   * Gets or Sets deposits
   */
  public enum DepositsEnum {
    QUARTZ_SAND("QUARTZ_SAND"),
    
    SILICON_CRYSTALS("SILICON_CRYSTALS"),
    
    PRECIOUS_STONES("PRECIOUS_STONES"),
    
    ICE_WATER("ICE_WATER"),
    
    AMMONIA_ICE("AMMONIA_ICE"),
    
    IRON_ORE("IRON_ORE"),
    
    COPPER_ORE("COPPER_ORE"),
    
    SILVER_ORE("SILVER_ORE"),
    
    ALUMINUM_ORE("ALUMINUM_ORE"),
    
    GOLD_ORE("GOLD_ORE"),
    
    PLATINUM_ORE("PLATINUM_ORE"),
    
    DIAMONDS("DIAMONDS"),
    
    URANITE_ORE("URANITE_ORE"),
    
    MERITIUM_ORE("MERITIUM_ORE");

    private String value;

    DepositsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DepositsEnum fromValue(String value) {
      for (DepositsEnum b : DepositsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEPOSITS = "deposits";
  private List<DepositsEnum> deposits;

  public static final String JSON_PROPERTY_REQUIREMENTS = "requirements";
  private ShipRequirements requirements;

  public ShipMount() {
  }

  public ShipMount symbol(SymbolEnum symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SymbolEnum getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public ShipMount name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ShipMount description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ShipMount strength(Integer strength) {
    
    this.strength = strength;
    return this;
  }

   /**
   * Get strength
   * minimum: 0
   * @return strength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStrength() {
    return strength;
  }


  @JsonProperty(JSON_PROPERTY_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrength(Integer strength) {
    this.strength = strength;
  }


  public ShipMount deposits(List<DepositsEnum> deposits) {
    
    this.deposits = deposits;
    return this;
  }

  public ShipMount addDepositsItem(DepositsEnum depositsItem) {
    if (this.deposits == null) {
      this.deposits = new ArrayList<>();
    }
    this.deposits.add(depositsItem);
    return this;
  }

   /**
   * Get deposits
   * @return deposits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DepositsEnum> getDeposits() {
    return deposits;
  }


  @JsonProperty(JSON_PROPERTY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeposits(List<DepositsEnum> deposits) {
    this.deposits = deposits;
  }


  public ShipMount requirements(ShipRequirements requirements) {
    
    this.requirements = requirements;
    return this;
  }

   /**
   * Get requirements
   * @return requirements
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ShipRequirements getRequirements() {
    return requirements;
  }


  @JsonProperty(JSON_PROPERTY_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequirements(ShipRequirements requirements) {
    this.requirements = requirements;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipMount shipMount = (ShipMount) o;
    return Objects.equals(this.symbol, shipMount.symbol) &&
        Objects.equals(this.name, shipMount.name) &&
        Objects.equals(this.description, shipMount.description) &&
        Objects.equals(this.strength, shipMount.strength) &&
        Objects.equals(this.deposits, shipMount.deposits) &&
        Objects.equals(this.requirements, shipMount.requirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description, strength, deposits, requirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipMount {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

