/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * WaypointTrait
 */
@JsonPropertyOrder({
  WaypointTrait.JSON_PROPERTY_SYMBOL,
  WaypointTrait.JSON_PROPERTY_NAME,
  WaypointTrait.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class WaypointTrait {
  /**
   * The unique identifier of the trait.
   */
  public enum SymbolEnum {
    UNCHARTED("UNCHARTED"),
    
    MARKETPLACE("MARKETPLACE"),
    
    SHIPYARD("SHIPYARD"),
    
    OUTPOST("OUTPOST"),
    
    SCATTERED_SETTLEMENTS("SCATTERED_SETTLEMENTS"),
    
    SPRAWLING_CITIES("SPRAWLING_CITIES"),
    
    MEGA_STRUCTURES("MEGA_STRUCTURES"),
    
    OVERCROWDED("OVERCROWDED"),
    
    HIGH_TECH("HIGH_TECH"),
    
    CORRUPT("CORRUPT"),
    
    BUREAUCRATIC("BUREAUCRATIC"),
    
    TRADING_HUB("TRADING_HUB"),
    
    INDUSTRIAL("INDUSTRIAL"),
    
    BLACK_MARKET("BLACK_MARKET"),
    
    RESEARCH_FACILITY("RESEARCH_FACILITY"),
    
    MILITARY_BASE("MILITARY_BASE"),
    
    SURVEILLANCE_OUTPOST("SURVEILLANCE_OUTPOST"),
    
    EXPLORATION_OUTPOST("EXPLORATION_OUTPOST"),
    
    MINERAL_DEPOSITS("MINERAL_DEPOSITS"),
    
    COMMON_METAL_DEPOSITS("COMMON_METAL_DEPOSITS"),
    
    PRECIOUS_METAL_DEPOSITS("PRECIOUS_METAL_DEPOSITS"),
    
    RARE_METAL_DEPOSITS("RARE_METAL_DEPOSITS"),
    
    METHANE_POOLS("METHANE_POOLS"),
    
    ICE_CRYSTALS("ICE_CRYSTALS"),
    
    EXPLOSIVE_GASES("EXPLOSIVE_GASES"),
    
    STRONG_MAGNETOSPHERE("STRONG_MAGNETOSPHERE"),
    
    VIBRANT_AURORAS("VIBRANT_AURORAS"),
    
    SALT_FLATS("SALT_FLATS"),
    
    CANYONS("CANYONS"),
    
    PERPETUAL_DAYLIGHT("PERPETUAL_DAYLIGHT"),
    
    PERPETUAL_OVERCAST("PERPETUAL_OVERCAST"),
    
    DRY_SEABEDS("DRY_SEABEDS"),
    
    MAGMA_SEAS("MAGMA_SEAS"),
    
    SUPERVOLCANOES("SUPERVOLCANOES"),
    
    ASH_CLOUDS("ASH_CLOUDS"),
    
    VAST_RUINS("VAST_RUINS"),
    
    MUTATED_FLORA("MUTATED_FLORA"),
    
    TERRAFORMED("TERRAFORMED"),
    
    EXTREME_TEMPERATURES("EXTREME_TEMPERATURES"),
    
    EXTREME_PRESSURE("EXTREME_PRESSURE"),
    
    DIVERSE_LIFE("DIVERSE_LIFE"),
    
    SCARCE_LIFE("SCARCE_LIFE"),
    
    FOSSILS("FOSSILS"),
    
    WEAK_GRAVITY("WEAK_GRAVITY"),
    
    STRONG_GRAVITY("STRONG_GRAVITY"),
    
    CRUSHING_GRAVITY("CRUSHING_GRAVITY"),
    
    TOXIC_ATMOSPHERE("TOXIC_ATMOSPHERE"),
    
    CORROSIVE_ATMOSPHERE("CORROSIVE_ATMOSPHERE"),
    
    BREATHABLE_ATMOSPHERE("BREATHABLE_ATMOSPHERE"),
    
    JOVIAN("JOVIAN"),
    
    ROCKY("ROCKY"),
    
    VOLCANIC("VOLCANIC"),
    
    FROZEN("FROZEN"),
    
    SWAMP("SWAMP"),
    
    BARREN("BARREN"),
    
    TEMPERATE("TEMPERATE"),
    
    JUNGLE("JUNGLE"),
    
    OCEAN("OCEAN"),
    
    STRIPPED("STRIPPED");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private SymbolEnum symbol;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public WaypointTrait() {
  }

  public WaypointTrait symbol(SymbolEnum symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The unique identifier of the trait.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SymbolEnum getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public WaypointTrait name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the trait.
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public WaypointTrait description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description of the trait.
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaypointTrait waypointTrait = (WaypointTrait) o;
    return Objects.equals(this.symbol, waypointTrait.symbol) &&
        Objects.equals(this.name, waypointTrait.name) &&
        Objects.equals(this.description, waypointTrait.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaypointTrait {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

