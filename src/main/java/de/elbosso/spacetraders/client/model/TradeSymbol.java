/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Gets or Sets TradeSymbol
 */
public enum TradeSymbol {
  
  PRECIOUS_STONES("PRECIOUS_STONES"),
  
  QUARTZ_SAND("QUARTZ_SAND"),
  
  SILICON_CRYSTALS("SILICON_CRYSTALS"),
  
  AMMONIA_ICE("AMMONIA_ICE"),
  
  LIQUID_HYDROGEN("LIQUID_HYDROGEN"),
  
  LIQUID_NITROGEN("LIQUID_NITROGEN"),
  
  ICE_WATER("ICE_WATER"),
  
  EXOTIC_MATTER("EXOTIC_MATTER"),
  
  ADVANCED_CIRCUITRY("ADVANCED_CIRCUITRY"),
  
  GRAVITON_EMITTERS("GRAVITON_EMITTERS"),
  
  IRON("IRON"),
  
  IRON_ORE("IRON_ORE"),
  
  COPPER("COPPER"),
  
  COPPER_ORE("COPPER_ORE"),
  
  ALUMINUM("ALUMINUM"),
  
  ALUMINUM_ORE("ALUMINUM_ORE"),
  
  SILVER("SILVER"),
  
  SILVER_ORE("SILVER_ORE"),
  
  GOLD("GOLD"),
  
  GOLD_ORE("GOLD_ORE"),
  
  PLATINUM("PLATINUM"),
  
  PLATINUM_ORE("PLATINUM_ORE"),
  
  DIAMONDS("DIAMONDS"),
  
  URANITE("URANITE"),
  
  URANITE_ORE("URANITE_ORE"),
  
  MERITIUM("MERITIUM"),
  
  MERITIUM_ORE("MERITIUM_ORE"),
  
  HYDROCARBON("HYDROCARBON"),
  
  ANTIMATTER("ANTIMATTER"),
  
  FERTILIZERS("FERTILIZERS"),
  
  FABRICS("FABRICS"),
  
  FOOD("FOOD"),
  
  JEWELRY("JEWELRY"),
  
  MACHINERY("MACHINERY"),
  
  FIREARMS("FIREARMS"),
  
  ASSAULT_RIFLES("ASSAULT_RIFLES"),
  
  MILITARY_EQUIPMENT("MILITARY_EQUIPMENT"),
  
  EXPLOSIVES("EXPLOSIVES"),
  
  LAB_INSTRUMENTS("LAB_INSTRUMENTS"),
  
  AMMUNITION("AMMUNITION"),
  
  ELECTRONICS("ELECTRONICS"),
  
  SHIP_PLATING("SHIP_PLATING"),
  
  EQUIPMENT("EQUIPMENT"),
  
  FUEL("FUEL"),
  
  MEDICINE("MEDICINE"),
  
  DRUGS("DRUGS"),
  
  CLOTHING("CLOTHING"),
  
  MICROPROCESSORS("MICROPROCESSORS"),
  
  PLASTICS("PLASTICS"),
  
  POLYNUCLEOTIDES("POLYNUCLEOTIDES"),
  
  BIOCOMPOSITES("BIOCOMPOSITES"),
  
  NANOBOTS("NANOBOTS"),
  
  AI_MAINFRAMES("AI_MAINFRAMES"),
  
  QUANTUM_DRIVES("QUANTUM_DRIVES"),
  
  ROBOTIC_DRONES("ROBOTIC_DRONES"),
  
  CYBER_IMPLANTS("CYBER_IMPLANTS"),
  
  GENE_THERAPEUTICS("GENE_THERAPEUTICS"),
  
  NEURAL_CHIPS("NEURAL_CHIPS"),
  
  MOOD_REGULATORS("MOOD_REGULATORS"),
  
  VIRAL_AGENTS("VIRAL_AGENTS"),
  
  MICRO_FUSION_GENERATORS("MICRO_FUSION_GENERATORS"),
  
  SUPERGRAINS("SUPERGRAINS"),
  
  LASER_RIFLES("LASER_RIFLES"),
  
  HOLOGRAPHICS("HOLOGRAPHICS"),
  
  SHIP_SALVAGE("SHIP_SALVAGE"),
  
  RELIC_TECH("RELIC_TECH"),
  
  NOVEL_LIFEFORMS("NOVEL_LIFEFORMS"),
  
  BOTANICAL_SPECIMENS("BOTANICAL_SPECIMENS"),
  
  CULTURAL_ARTIFACTS("CULTURAL_ARTIFACTS"),
  
  REACTOR_SOLAR_I("REACTOR_SOLAR_I"),
  
  REACTOR_FUSION_I("REACTOR_FUSION_I"),
  
  REACTOR_FISSION_I("REACTOR_FISSION_I"),
  
  REACTOR_CHEMICAL_I("REACTOR_CHEMICAL_I"),
  
  REACTOR_ANTIMATTER_I("REACTOR_ANTIMATTER_I"),
  
  ENGINE_IMPULSE_DRIVE_I("ENGINE_IMPULSE_DRIVE_I"),
  
  ENGINE_ION_DRIVE_I("ENGINE_ION_DRIVE_I"),
  
  ENGINE_ION_DRIVE_II("ENGINE_ION_DRIVE_II"),
  
  ENGINE_HYPER_DRIVE_I("ENGINE_HYPER_DRIVE_I"),
  
  MODULE_MINERAL_PROCESSOR_I("MODULE_MINERAL_PROCESSOR_I"),
  
  MODULE_CARGO_HOLD_I("MODULE_CARGO_HOLD_I"),
  
  MODULE_CREW_QUARTERS_I("MODULE_CREW_QUARTERS_I"),
  
  MODULE_ENVOY_QUARTERS_I("MODULE_ENVOY_QUARTERS_I"),
  
  MODULE_PASSENGER_CABIN_I("MODULE_PASSENGER_CABIN_I"),
  
  MODULE_MICRO_REFINERY_I("MODULE_MICRO_REFINERY_I"),
  
  MODULE_ORE_REFINERY_I("MODULE_ORE_REFINERY_I"),
  
  MODULE_FUEL_REFINERY_I("MODULE_FUEL_REFINERY_I"),
  
  MODULE_SCIENCE_LAB_I("MODULE_SCIENCE_LAB_I"),
  
  MODULE_JUMP_DRIVE_I("MODULE_JUMP_DRIVE_I"),
  
  MODULE_JUMP_DRIVE_II("MODULE_JUMP_DRIVE_II"),
  
  MODULE_JUMP_DRIVE_III("MODULE_JUMP_DRIVE_III"),
  
  MODULE_WARP_DRIVE_I("MODULE_WARP_DRIVE_I"),
  
  MODULE_WARP_DRIVE_II("MODULE_WARP_DRIVE_II"),
  
  MODULE_WARP_DRIVE_III("MODULE_WARP_DRIVE_III"),
  
  MODULE_SHIELD_GENERATOR_I("MODULE_SHIELD_GENERATOR_I"),
  
  MODULE_SHIELD_GENERATOR_II("MODULE_SHIELD_GENERATOR_II"),
  
  MOUNT_GAS_SIPHON_I("MOUNT_GAS_SIPHON_I"),
  
  MOUNT_GAS_SIPHON_II("MOUNT_GAS_SIPHON_II"),
  
  MOUNT_GAS_SIPHON_III("MOUNT_GAS_SIPHON_III"),
  
  MOUNT_SURVEYOR_I("MOUNT_SURVEYOR_I"),
  
  MOUNT_SURVEYOR_II("MOUNT_SURVEYOR_II"),
  
  MOUNT_SURVEYOR_III("MOUNT_SURVEYOR_III"),
  
  MOUNT_SENSOR_ARRAY_I("MOUNT_SENSOR_ARRAY_I"),
  
  MOUNT_SENSOR_ARRAY_II("MOUNT_SENSOR_ARRAY_II"),
  
  MOUNT_SENSOR_ARRAY_III("MOUNT_SENSOR_ARRAY_III"),
  
  MOUNT_MINING_LASER_I("MOUNT_MINING_LASER_I"),
  
  MOUNT_MINING_LASER_II("MOUNT_MINING_LASER_II"),
  
  MOUNT_MINING_LASER_III("MOUNT_MINING_LASER_III"),
  
  MOUNT_LASER_CANNON_I("MOUNT_LASER_CANNON_I"),
  
  MOUNT_MISSILE_LAUNCHER_I("MOUNT_MISSILE_LAUNCHER_I"),
  
  MOUNT_TURRET_I("MOUNT_TURRET_I");

  private String value;

  TradeSymbol(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static TradeSymbol fromValue(String value) {
    for (TradeSymbol b : TradeSymbol.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

