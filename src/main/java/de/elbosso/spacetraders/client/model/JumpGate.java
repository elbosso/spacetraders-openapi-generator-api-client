/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.ConnectedSystem;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  JumpGate.JSON_PROPERTY_JUMP_RANGE,
  JumpGate.JSON_PROPERTY_FACTION_SYMBOL,
  JumpGate.JSON_PROPERTY_CONNECTED_SYSTEMS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class JumpGate {
  public static final String JSON_PROPERTY_JUMP_RANGE = "jumpRange";
  private BigDecimal jumpRange;

  public static final String JSON_PROPERTY_FACTION_SYMBOL = "factionSymbol";
  private String factionSymbol;

  public static final String JSON_PROPERTY_CONNECTED_SYSTEMS = "connectedSystems";
  private List<ConnectedSystem> connectedSystems = new ArrayList<>();

  public JumpGate() {
  }

  public JumpGate jumpRange(BigDecimal jumpRange) {
    
    this.jumpRange = jumpRange;
    return this;
  }

   /**
   * The maximum jump range of the gate.
   * @return jumpRange
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JUMP_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getJumpRange() {
    return jumpRange;
  }


  @JsonProperty(JSON_PROPERTY_JUMP_RANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJumpRange(BigDecimal jumpRange) {
    this.jumpRange = jumpRange;
  }


  public JumpGate factionSymbol(String factionSymbol) {
    
    this.factionSymbol = factionSymbol;
    return this;
  }

   /**
   * The symbol of the faction that owns the gate.
   * @return factionSymbol
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FACTION_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFactionSymbol() {
    return factionSymbol;
  }


  @JsonProperty(JSON_PROPERTY_FACTION_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactionSymbol(String factionSymbol) {
    this.factionSymbol = factionSymbol;
  }


  public JumpGate connectedSystems(List<ConnectedSystem> connectedSystems) {
    
    this.connectedSystems = connectedSystems;
    return this;
  }

  public JumpGate addConnectedSystemsItem(ConnectedSystem connectedSystemsItem) {
    if (this.connectedSystems == null) {
      this.connectedSystems = new ArrayList<>();
    }
    this.connectedSystems.add(connectedSystemsItem);
    return this;
  }

   /**
   * The systems within range of the gate that have a corresponding gate.
   * @return connectedSystems
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONNECTED_SYSTEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ConnectedSystem> getConnectedSystems() {
    return connectedSystems;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTED_SYSTEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectedSystems(List<ConnectedSystem> connectedSystems) {
    this.connectedSystems = connectedSystems;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JumpGate jumpGate = (JumpGate) o;
    return Objects.equals(this.jumpRange, jumpGate.jumpRange) &&
        Objects.equals(this.factionSymbol, jumpGate.factionSymbol) &&
        Objects.equals(this.connectedSystems, jumpGate.connectedSystems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jumpRange, factionSymbol, connectedSystems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JumpGate {\n");
    sb.append("    jumpRange: ").append(toIndentedString(jumpRange)).append("\n");
    sb.append("    factionSymbol: ").append(toIndentedString(factionSymbol)).append("\n");
    sb.append("    connectedSystems: ").append(toIndentedString(connectedSystems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

