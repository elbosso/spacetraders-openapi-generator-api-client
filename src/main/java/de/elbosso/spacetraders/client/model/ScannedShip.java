/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.ScannedShipEngine;
import de.elbosso.spacetraders.client.model.ScannedShipFrame;
import de.elbosso.spacetraders.client.model.ScannedShipMountsInner;
import de.elbosso.spacetraders.client.model.ScannedShipReactor;
import de.elbosso.spacetraders.client.model.ShipNav;
import de.elbosso.spacetraders.client.model.ShipRegistration;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The ship that was scanned. Details include information about the ship that could be detected by the scanner.
 */
@JsonPropertyOrder({
  ScannedShip.JSON_PROPERTY_SYMBOL,
  ScannedShip.JSON_PROPERTY_REGISTRATION,
  ScannedShip.JSON_PROPERTY_NAV,
  ScannedShip.JSON_PROPERTY_FRAME,
  ScannedShip.JSON_PROPERTY_REACTOR,
  ScannedShip.JSON_PROPERTY_ENGINE,
  ScannedShip.JSON_PROPERTY_MOUNTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class ScannedShip {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_REGISTRATION = "registration";
  private ShipRegistration registration;

  public static final String JSON_PROPERTY_NAV = "nav";
  private ShipNav nav;

  public static final String JSON_PROPERTY_FRAME = "frame";
  private ScannedShipFrame frame;

  public static final String JSON_PROPERTY_REACTOR = "reactor";
  private ScannedShipReactor reactor;

  public static final String JSON_PROPERTY_ENGINE = "engine";
  private ScannedShipEngine engine;

  public static final String JSON_PROPERTY_MOUNTS = "mounts";
  private List<ScannedShipMountsInner> mounts;

  public ScannedShip() {
  }

  public ScannedShip symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The globally unique identifier of the ship.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ScannedShip registration(ShipRegistration registration) {
    
    this.registration = registration;
    return this;
  }

   /**
   * Get registration
   * @return registration
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ShipRegistration getRegistration() {
    return registration;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRegistration(ShipRegistration registration) {
    this.registration = registration;
  }


  public ScannedShip nav(ShipNav nav) {
    
    this.nav = nav;
    return this;
  }

   /**
   * Get nav
   * @return nav
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ShipNav getNav() {
    return nav;
  }


  @JsonProperty(JSON_PROPERTY_NAV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNav(ShipNav nav) {
    this.nav = nav;
  }


  public ScannedShip frame(ScannedShipFrame frame) {
    
    this.frame = frame;
    return this;
  }

   /**
   * Get frame
   * @return frame
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScannedShipFrame getFrame() {
    return frame;
  }


  @JsonProperty(JSON_PROPERTY_FRAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrame(ScannedShipFrame frame) {
    this.frame = frame;
  }


  public ScannedShip reactor(ScannedShipReactor reactor) {
    
    this.reactor = reactor;
    return this;
  }

   /**
   * Get reactor
   * @return reactor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScannedShipReactor getReactor() {
    return reactor;
  }


  @JsonProperty(JSON_PROPERTY_REACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReactor(ScannedShipReactor reactor) {
    this.reactor = reactor;
  }


  public ScannedShip engine(ScannedShipEngine engine) {
    
    this.engine = engine;
    return this;
  }

   /**
   * Get engine
   * @return engine
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENGINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ScannedShipEngine getEngine() {
    return engine;
  }


  @JsonProperty(JSON_PROPERTY_ENGINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEngine(ScannedShipEngine engine) {
    this.engine = engine;
  }


  public ScannedShip mounts(List<ScannedShipMountsInner> mounts) {
    
    this.mounts = mounts;
    return this;
  }

  public ScannedShip addMountsItem(ScannedShipMountsInner mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

   /**
   * Get mounts
   * @return mounts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ScannedShipMountsInner> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<ScannedShipMountsInner> mounts) {
    this.mounts = mounts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScannedShip scannedShip = (ScannedShip) o;
    return Objects.equals(this.symbol, scannedShip.symbol) &&
        Objects.equals(this.registration, scannedShip.registration) &&
        Objects.equals(this.nav, scannedShip.nav) &&
        Objects.equals(this.frame, scannedShip.frame) &&
        Objects.equals(this.reactor, scannedShip.reactor) &&
        Objects.equals(this.engine, scannedShip.engine) &&
        Objects.equals(this.mounts, scannedShip.mounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, registration, nav, frame, reactor, engine, mounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScannedShip {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    nav: ").append(toIndentedString(nav)).append("\n");
    sb.append("    frame: ").append(toIndentedString(frame)).append("\n");
    sb.append("    reactor: ").append(toIndentedString(reactor)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

