/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.ShipyardShip;
import de.elbosso.spacetraders.client.model.ShipyardShipTypesInner;
import de.elbosso.spacetraders.client.model.ShipyardTransaction;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  Shipyard.JSON_PROPERTY_SYMBOL,
  Shipyard.JSON_PROPERTY_SHIP_TYPES,
  Shipyard.JSON_PROPERTY_TRANSACTIONS,
  Shipyard.JSON_PROPERTY_SHIPS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class Shipyard {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_SHIP_TYPES = "shipTypes";
  private List<ShipyardShipTypesInner> shipTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private List<ShipyardTransaction> transactions;

  public static final String JSON_PROPERTY_SHIPS = "ships";
  private List<ShipyardShip> ships;

  public Shipyard() {
  }

  public Shipyard symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Shipyard shipTypes(List<ShipyardShipTypesInner> shipTypes) {
    
    this.shipTypes = shipTypes;
    return this;
  }

  public Shipyard addShipTypesItem(ShipyardShipTypesInner shipTypesItem) {
    if (this.shipTypes == null) {
      this.shipTypes = new ArrayList<>();
    }
    this.shipTypes.add(shipTypesItem);
    return this;
  }

   /**
   * The list of ship types available for purchase at this shipyard.
   * @return shipTypes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHIP_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ShipyardShipTypesInner> getShipTypes() {
    return shipTypes;
  }


  @JsonProperty(JSON_PROPERTY_SHIP_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShipTypes(List<ShipyardShipTypesInner> shipTypes) {
    this.shipTypes = shipTypes;
  }


  public Shipyard transactions(List<ShipyardTransaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public Shipyard addTransactionsItem(ShipyardTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * The list of recent transactions at this shipyard.
   * @return transactions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShipyardTransaction> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(List<ShipyardTransaction> transactions) {
    this.transactions = transactions;
  }


  public Shipyard ships(List<ShipyardShip> ships) {
    
    this.ships = ships;
    return this;
  }

  public Shipyard addShipsItem(ShipyardShip shipsItem) {
    if (this.ships == null) {
      this.ships = new ArrayList<>();
    }
    this.ships.add(shipsItem);
    return this;
  }

   /**
   * The ships that are currently available for purchase at the shipyard.
   * @return ships
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShipyardShip> getShips() {
    return ships;
  }


  @JsonProperty(JSON_PROPERTY_SHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShips(List<ShipyardShip> ships) {
    this.ships = ships;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Shipyard shipyard = (Shipyard) o;
    return Objects.equals(this.symbol, shipyard.symbol) &&
        Objects.equals(this.shipTypes, shipyard.shipTypes) &&
        Objects.equals(this.transactions, shipyard.transactions) &&
        Objects.equals(this.ships, shipyard.ships);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, shipTypes, transactions, ships);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Shipyard {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    shipTypes: ").append(toIndentedString(shipTypes)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    ships: ").append(toIndentedString(ships)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

