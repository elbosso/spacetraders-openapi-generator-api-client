/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.FactionTrait;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  Faction.JSON_PROPERTY_SYMBOL,
  Faction.JSON_PROPERTY_NAME,
  Faction.JSON_PROPERTY_DESCRIPTION,
  Faction.JSON_PROPERTY_HEADQUARTERS,
  Faction.JSON_PROPERTY_TRAITS,
  Faction.JSON_PROPERTY_IS_RECRUITING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class Faction {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_HEADQUARTERS = "headquarters";
  private String headquarters;

  public static final String JSON_PROPERTY_TRAITS = "traits";
  private List<FactionTrait> traits = new ArrayList<>();

  public static final String JSON_PROPERTY_IS_RECRUITING = "isRecruiting";
  private Boolean isRecruiting;

  public Faction() {
  }

  public Faction symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Faction name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Faction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Faction headquarters(String headquarters) {
    
    this.headquarters = headquarters;
    return this;
  }

   /**
   * Get headquarters
   * @return headquarters
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADQUARTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHeadquarters() {
    return headquarters;
  }


  @JsonProperty(JSON_PROPERTY_HEADQUARTERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeadquarters(String headquarters) {
    this.headquarters = headquarters;
  }


  public Faction traits(List<FactionTrait> traits) {
    
    this.traits = traits;
    return this;
  }

  public Faction addTraitsItem(FactionTrait traitsItem) {
    if (this.traits == null) {
      this.traits = new ArrayList<>();
    }
    this.traits.add(traitsItem);
    return this;
  }

   /**
   * Get traits
   * @return traits
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRAITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FactionTrait> getTraits() {
    return traits;
  }


  @JsonProperty(JSON_PROPERTY_TRAITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTraits(List<FactionTrait> traits) {
    this.traits = traits;
  }


  public Faction isRecruiting(Boolean isRecruiting) {
    
    this.isRecruiting = isRecruiting;
    return this;
  }

   /**
   * Whether or not the faction is currently recruiting new agents.
   * @return isRecruiting
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_RECRUITING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsRecruiting() {
    return isRecruiting;
  }


  @JsonProperty(JSON_PROPERTY_IS_RECRUITING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsRecruiting(Boolean isRecruiting) {
    this.isRecruiting = isRecruiting;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Faction faction = (Faction) o;
    return Objects.equals(this.symbol, faction.symbol) &&
        Objects.equals(this.name, faction.name) &&
        Objects.equals(this.description, faction.description) &&
        Objects.equals(this.headquarters, faction.headquarters) &&
        Objects.equals(this.traits, faction.traits) &&
        Objects.equals(this.isRecruiting, faction.isRecruiting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description, headquarters, traits, isRecruiting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Faction {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    headquarters: ").append(toIndentedString(headquarters)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    isRecruiting: ").append(toIndentedString(isRecruiting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

