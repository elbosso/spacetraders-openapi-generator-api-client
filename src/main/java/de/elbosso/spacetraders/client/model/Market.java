/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.elbosso.spacetraders.client.model.MarketTradeGood;
import de.elbosso.spacetraders.client.model.MarketTransaction;
import de.elbosso.spacetraders.client.model.TradeGood;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * 
 */
@JsonPropertyOrder({
  Market.JSON_PROPERTY_SYMBOL,
  Market.JSON_PROPERTY_EXPORTS,
  Market.JSON_PROPERTY_IMPORTS,
  Market.JSON_PROPERTY_EXCHANGE,
  Market.JSON_PROPERTY_TRANSACTIONS,
  Market.JSON_PROPERTY_TRADE_GOODS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class Market {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_EXPORTS = "exports";
  private List<TradeGood> exports = new ArrayList<>();

  public static final String JSON_PROPERTY_IMPORTS = "imports";
  private List<TradeGood> imports = new ArrayList<>();

  public static final String JSON_PROPERTY_EXCHANGE = "exchange";
  private List<TradeGood> exchange = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private List<MarketTransaction> transactions;

  public static final String JSON_PROPERTY_TRADE_GOODS = "tradeGoods";
  private List<MarketTradeGood> tradeGoods;

  public Market() {
  }

  public Market symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The symbol of the market. The symbol is the same as the waypoint where the market is located.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Market exports(List<TradeGood> exports) {
    
    this.exports = exports;
    return this;
  }

  public Market addExportsItem(TradeGood exportsItem) {
    if (this.exports == null) {
      this.exports = new ArrayList<>();
    }
    this.exports.add(exportsItem);
    return this;
  }

   /**
   * The list of goods that are exported from this market.
   * @return exports
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPORTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TradeGood> getExports() {
    return exports;
  }


  @JsonProperty(JSON_PROPERTY_EXPORTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExports(List<TradeGood> exports) {
    this.exports = exports;
  }


  public Market imports(List<TradeGood> imports) {
    
    this.imports = imports;
    return this;
  }

  public Market addImportsItem(TradeGood importsItem) {
    if (this.imports == null) {
      this.imports = new ArrayList<>();
    }
    this.imports.add(importsItem);
    return this;
  }

   /**
   * The list of goods that are sought as imports in this market.
   * @return imports
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMPORTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TradeGood> getImports() {
    return imports;
  }


  @JsonProperty(JSON_PROPERTY_IMPORTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImports(List<TradeGood> imports) {
    this.imports = imports;
  }


  public Market exchange(List<TradeGood> exchange) {
    
    this.exchange = exchange;
    return this;
  }

  public Market addExchangeItem(TradeGood exchangeItem) {
    if (this.exchange == null) {
      this.exchange = new ArrayList<>();
    }
    this.exchange.add(exchangeItem);
    return this;
  }

   /**
   * The list of goods that are bought and sold between agents at this market.
   * @return exchange
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TradeGood> getExchange() {
    return exchange;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchange(List<TradeGood> exchange) {
    this.exchange = exchange;
  }


  public Market transactions(List<MarketTransaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public Market addTransactionsItem(MarketTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * The list of recent transactions at this market. Visible only when a ship is present at the market.
   * @return transactions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MarketTransaction> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(List<MarketTransaction> transactions) {
    this.transactions = transactions;
  }


  public Market tradeGoods(List<MarketTradeGood> tradeGoods) {
    
    this.tradeGoods = tradeGoods;
    return this;
  }

  public Market addTradeGoodsItem(MarketTradeGood tradeGoodsItem) {
    if (this.tradeGoods == null) {
      this.tradeGoods = new ArrayList<>();
    }
    this.tradeGoods.add(tradeGoodsItem);
    return this;
  }

   /**
   * The list of goods that are traded at this market. Visible only when a ship is present at the market.
   * @return tradeGoods
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRADE_GOODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MarketTradeGood> getTradeGoods() {
    return tradeGoods;
  }


  @JsonProperty(JSON_PROPERTY_TRADE_GOODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTradeGoods(List<MarketTradeGood> tradeGoods) {
    this.tradeGoods = tradeGoods;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Market market = (Market) o;
    return Objects.equals(this.symbol, market.symbol) &&
        Objects.equals(this.exports, market.exports) &&
        Objects.equals(this.imports, market.imports) &&
        Objects.equals(this.exchange, market.exchange) &&
        Objects.equals(this.transactions, market.transactions) &&
        Objects.equals(this.tradeGoods, market.tradeGoods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, exports, imports, exchange, transactions, tradeGoods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Market {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    exports: ").append(toIndentedString(exports)).append("\n");
    sb.append("    imports: ").append(toIndentedString(imports)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    tradeGoods: ").append(toIndentedString(tradeGoods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

