/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FactionTrait
 */
@JsonPropertyOrder({
  FactionTrait.JSON_PROPERTY_SYMBOL,
  FactionTrait.JSON_PROPERTY_NAME,
  FactionTrait.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class FactionTrait {
  /**
   * The unique identifier of the trait.
   */
  public enum SymbolEnum {
    BUREAUCRATIC("BUREAUCRATIC"),
    
    SECRETIVE("SECRETIVE"),
    
    CAPITALISTIC("CAPITALISTIC"),
    
    INDUSTRIOUS("INDUSTRIOUS"),
    
    PEACEFUL("PEACEFUL"),
    
    DISTRUSTFUL("DISTRUSTFUL"),
    
    WELCOMING("WELCOMING"),
    
    SMUGGLERS("SMUGGLERS"),
    
    SCAVENGERS("SCAVENGERS"),
    
    REBELLIOUS("REBELLIOUS"),
    
    EXILES("EXILES"),
    
    PIRATES("PIRATES"),
    
    RAIDERS("RAIDERS"),
    
    CLAN("CLAN"),
    
    GUILD("GUILD"),
    
    DOMINION("DOMINION"),
    
    FRINGE("FRINGE"),
    
    FORSAKEN("FORSAKEN"),
    
    ISOLATED("ISOLATED"),
    
    LOCALIZED("LOCALIZED"),
    
    ESTABLISHED("ESTABLISHED"),
    
    NOTABLE("NOTABLE"),
    
    DOMINANT("DOMINANT"),
    
    INESCAPABLE("INESCAPABLE"),
    
    INNOVATIVE("INNOVATIVE"),
    
    BOLD("BOLD"),
    
    VISIONARY("VISIONARY"),
    
    CURIOUS("CURIOUS"),
    
    DARING("DARING"),
    
    EXPLORATORY("EXPLORATORY"),
    
    RESOURCEFUL("RESOURCEFUL"),
    
    FLEXIBLE("FLEXIBLE"),
    
    COOPERATIVE("COOPERATIVE"),
    
    UNITED("UNITED"),
    
    STRATEGIC("STRATEGIC"),
    
    INTELLIGENT("INTELLIGENT"),
    
    RESEARCH_FOCUSED("RESEARCH_FOCUSED"),
    
    COLLABORATIVE("COLLABORATIVE"),
    
    PROGRESSIVE("PROGRESSIVE"),
    
    MILITARISTIC("MILITARISTIC"),
    
    TECHNOLOGICALLY_ADVANCED("TECHNOLOGICALLY_ADVANCED"),
    
    AGGRESSIVE("AGGRESSIVE"),
    
    IMPERIALISTIC("IMPERIALISTIC"),
    
    TREASURE_HUNTERS("TREASURE_HUNTERS"),
    
    DEXTEROUS("DEXTEROUS"),
    
    UNPREDICTABLE("UNPREDICTABLE"),
    
    BRUTAL("BRUTAL"),
    
    FLEETING("FLEETING"),
    
    ADAPTABLE("ADAPTABLE"),
    
    SELF_SUFFICIENT("SELF_SUFFICIENT"),
    
    DEFENSIVE("DEFENSIVE"),
    
    PROUD("PROUD"),
    
    DIVERSE("DIVERSE"),
    
    INDEPENDENT("INDEPENDENT"),
    
    SELF_INTERESTED("SELF_INTERESTED"),
    
    FRAGMENTED("FRAGMENTED"),
    
    COMMERCIAL("COMMERCIAL"),
    
    FREE_MARKETS("FREE_MARKETS"),
    
    ENTREPRENEURIAL("ENTREPRENEURIAL");

    private String value;

    SymbolEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SymbolEnum fromValue(String value) {
      for (SymbolEnum b : SymbolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private SymbolEnum symbol;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public FactionTrait() {
  }

  public FactionTrait symbol(SymbolEnum symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The unique identifier of the trait.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SymbolEnum getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(SymbolEnum symbol) {
    this.symbol = symbol;
  }


  public FactionTrait name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the trait.
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public FactionTrait description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description of the trait.
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FactionTrait factionTrait = (FactionTrait) o;
    return Objects.equals(this.symbol, factionTrait.symbol) &&
        Objects.equals(this.name, factionTrait.name) &&
        Objects.equals(this.description, factionTrait.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FactionTrait {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

