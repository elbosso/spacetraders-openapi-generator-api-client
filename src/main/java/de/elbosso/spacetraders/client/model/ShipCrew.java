/*
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.elbosso.spacetraders.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The ship&#39;s crew service and maintain the ship&#39;s systems and equipment.
 */
@JsonPropertyOrder({
  ShipCrew.JSON_PROPERTY_CURRENT,
  ShipCrew.JSON_PROPERTY_REQUIRED,
  ShipCrew.JSON_PROPERTY_CAPACITY,
  ShipCrew.JSON_PROPERTY_ROTATION,
  ShipCrew.JSON_PROPERTY_MORALE,
  ShipCrew.JSON_PROPERTY_WAGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-05T09:25:51.979579Z[Etc/UTC]")
public class ShipCrew {
  public static final String JSON_PROPERTY_CURRENT = "current";
  private Integer current;

  public static final String JSON_PROPERTY_REQUIRED = "required";
  private Integer required;

  public static final String JSON_PROPERTY_CAPACITY = "capacity";
  private Integer capacity;

  /**
   * The rotation of crew shifts. A stricter shift improves the ship&#39;s performance. A more relaxed shift improves the crew&#39;s morale.
   */
  public enum RotationEnum {
    STRICT("STRICT"),
    
    RELAXED("RELAXED");

    private String value;

    RotationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RotationEnum fromValue(String value) {
      for (RotationEnum b : RotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROTATION = "rotation";
  private RotationEnum rotation = RotationEnum.STRICT;

  public static final String JSON_PROPERTY_MORALE = "morale";
  private Integer morale;

  public static final String JSON_PROPERTY_WAGES = "wages";
  private Integer wages;

  public ShipCrew() {
  }

  public ShipCrew current(Integer current) {
    
    this.current = current;
    return this;
  }

   /**
   * The current number of crew members on the ship.
   * @return current
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCurrent() {
    return current;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrent(Integer current) {
    this.current = current;
  }


  public ShipCrew required(Integer required) {
    
    this.required = required;
    return this;
  }

   /**
   * The minimum number of crew members required to maintain the ship.
   * @return required
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRequired() {
    return required;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequired(Integer required) {
    this.required = required;
  }


  public ShipCrew capacity(Integer capacity) {
    
    this.capacity = capacity;
    return this;
  }

   /**
   * The maximum number of crew members the ship can support.
   * @return capacity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCapacity() {
    return capacity;
  }


  @JsonProperty(JSON_PROPERTY_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public ShipCrew rotation(RotationEnum rotation) {
    
    this.rotation = rotation;
    return this;
  }

   /**
   * The rotation of crew shifts. A stricter shift improves the ship&#39;s performance. A more relaxed shift improves the crew&#39;s morale.
   * @return rotation
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RotationEnum getRotation() {
    return rotation;
  }


  @JsonProperty(JSON_PROPERTY_ROTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRotation(RotationEnum rotation) {
    this.rotation = rotation;
  }


  public ShipCrew morale(Integer morale) {
    
    this.morale = morale;
    return this;
  }

   /**
   * A rough measure of the crew&#39;s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
   * minimum: 0
   * maximum: 100
   * @return morale
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MORALE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMorale() {
    return morale;
  }


  @JsonProperty(JSON_PROPERTY_MORALE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMorale(Integer morale) {
    this.morale = morale;
  }


  public ShipCrew wages(Integer wages) {
    
    this.wages = wages;
    return this;
  }

   /**
   * The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
   * minimum: 0
   * @return wages
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWages() {
    return wages;
  }


  @JsonProperty(JSON_PROPERTY_WAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWages(Integer wages) {
    this.wages = wages;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipCrew shipCrew = (ShipCrew) o;
    return Objects.equals(this.current, shipCrew.current) &&
        Objects.equals(this.required, shipCrew.required) &&
        Objects.equals(this.capacity, shipCrew.capacity) &&
        Objects.equals(this.rotation, shipCrew.rotation) &&
        Objects.equals(this.morale, shipCrew.morale) &&
        Objects.equals(this.wages, shipCrew.wages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, required, capacity, rotation, morale, wages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipCrew {\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    morale: ").append(toIndentedString(morale)).append("\n");
    sb.append("    wages: ").append(toIndentedString(wages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

